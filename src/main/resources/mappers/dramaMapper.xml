<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="dramaMapper"> 
  	<parameterMap type="SeatDTO" id="seatDTO"/>
  	<resultMap type="DramaListDTO" id="dramalistDTO"/>
 	<resultMap type="CompanyDTO" id="companyDTO"/>
  	<resultMap type="ReviewDTO" id="reviewDTO"/>
  	<resultMap type="FaqDTO" id="faqDTO"/>
  	<resultMap type="Qna_viewDTO" id="qna_viewDTO"/>
  	<resultMap type="SeatDTO" id="seatDTO"/>
  	<resultMap type="FileDTO" id="fileDTO"/>
  	<resultMap type="DramaDTO" id="dramaDTO">	
  		<id property="drama_num" column="drama_num"/>
  		<result property="company_num" column="company_num"/>
  		<result property="title" column="title"/>
  		<result property="contents" column="contents"/>		
  		<result property="place" column="place"/>
  		<result property="price" column="price"/>
  		<result property="buy_hit" column="buy_hit"/>
  		<result property="file_num" column="file_num"/>
  	</resultMap>
  	
  	
  
  	<select id="selectList" parameterType="java.util.Map" resultType="DramaDTO">
  		select * from
  		(select rownum R, N.* from
  		(select * from drama
  		
  		<if test="kind == 'title'">
  		where title like '%'||#{search}||'%'
  		</if> 
  		
  		<if test="kind == 'contents'">
  		where contents like '%'||#{search}||'%'
  		</if>
  		order by drama_num desc) N)
  		where R between #{startRow} and #{lastRow}
  	</select>
  	
  		<select id="selectList_write_title" parameterType="java.util.Map" resultType="DramaDTO">
  		select * from
  		(select rownum R, N.* from
  		(select * from drama
  		
  		<if test="kind == 'title'">
  		where title like '%'||#{search}||'%'
  		</if> 
  		
  		<if test="kind == 'contents'">
  		where contents like '%'||#{search}||'%'
  		</if>
  		order by drama_num desc) N)
  		where R between #{startRow} and #{lastRow}
  	</select>
  	
  	<!-- 공연리뷰 리스트 출력시 drama 제목 출력 -->	
  	<select id="drama_title" parameterType="int" resultType="dramaDTO">
  select * from drama where drama_num=#{drama_num}
  	</select>	
  		
  		
	<!-- write부분 -->
  	<select id="nextDramaNum" resultType="int">
  		select drama_num.nextval from dual
  	</select>
  	<insert id="date_insert" parameterType="java.util.HashMap">
  		insert into date_list values(date_num.nextval, #{drama_num}, #{drama_date}, #{drama_time})
  	</insert>  	
	<insert id="insert" parameterType="com.theater.drama.DramaDTO">
		insert into drama values(#{drama_num},#{company_num},#{title}, #{contents}, #{place}, #{price}, 0, #{file_num}, #{simple}, #{address})  	
  	</insert> 
  	<!-- wirte부분 끝 -->
  	
  	<select id="fileList" parameterType="int" resultType="com.theater.file.FileDTO">
  		select * from file_table where file_num=#{file_num}
  	</select> 
  	
  	<update id="hitUpdate" parameterType="int">
  		update drama set buy_hit=buy_hit+1 where drama_num=#{drama_num}
  	</update>
  
  	
 	<!-- 공연 선택 view page -->
 	<resultMap type="dramaDTO" id="dramaviewResult">
 		<id property="drama_num" column="drama_num"/>
 		<collection property="file_num" column="file_num" ofType="FileDTO" select="selectFile"></collection>
 	</resultMap>
  	<select id="selectOne" parameterType="int" resultMap="dramaDTO">
  		select * from drama where drama_num=#{drama_num}
  	</select>
  	<select id="selectFile" parameterType="int" resultType="FileDTO">
  	select * from file_table where file_num=#{file_num}
  	</select>
  	<select id="timeList" parameterType="java.util.HashMap" resultMap="dramalistDTO">
  		select distinct drama_time, drama_num, drama_date from date_list where drama_num=#{drama_num} and drama_date=#{drama_date} order by drama_time asc
  	</select>
  	<select id="dateList" parameterType="int" resultMap="dramalistDTO">
  		select distinct drama_date, drama_num from date_list where drama_num=#{drama_num} order by drama_date asc
  	</select>
  	<select id="searchCompany_num" parameterType="int" resultType="int">
  		select company_num from drama where drama_num=#{drama_num}
  	</select>
 
  	<!-- 리뷰 3개만 보이게 -->
  	<select id="selectList_review" parameterType="com.theater.util.RowNum" resultMap="reviewDTO">
  	<!-- 	select * from
  		(select rownum r, N.* from
  		(select * from review order by review_date desc) N)
  		where r between #{startRow} and #{lastRow}  -->
  		 select * from review where drama_num=#{drama_num}  order by review_date desc
  </select>
 
  <!-- 리뷰갯수 (별점 평균낼때사용) -->
  <select id="totalcount_review" parameterType="com.theater.util.RowNum" resultType="int">
  		select nvl(count(review_num),0) from review
  </select>
 
  <!-- 연극 리뷰(해당 drama 최신 리뷰 하나만 나오게 안되서 대기-->
  <select id="selectOne_review" parameterType="int"  resultMap="reviewDTO">
   select max(review_num) from review where drama_num=#{drama_num}
  </select>
  
  <select id="getDrama_num" resultType="int">
  		select drama_num.nextval from dual
  	</select>
  	
    	<select id="totalcount_list" resultType="int">
  		select nvl(count(drama_num),0) from drama
  </select>
  
 
  <!-- 후기(별점) 페이징 처리 -->
  <select id="totalcount_page" parameterType="int" resultType="int">
	select COUNT(drama_num) from REVIEW where drama_num=#{drama_num}
  </select>
 
  <!-- qna_view 페이징 처리 -->
  <select id="totalcount_qna" parameterType="com.theater.util.RowNum" resultType="int">
  select nvl(count(qna_viewnum),0) from qna_view
  </select>
 
  <!-- 후기(별점) 평균점수 -->
  <select id="review_avg" parameterType="int" resultType="int">
  select sum(star)/count(drama_num) from REVIEW where drama_num=#{drama_num}
  </select>
 
  <!-- qna 리스트 -->
  <select id="selectList_qna" parameterType="com.theater.util.RowNum" resultMap="qna_viewDTO">
 		select * from
  		(select rownum r, N.* from
  		(select * from qna_view order by ref desc , step asc) N)
  		where r between #{startRow} and #{lastRow}  
  </select>
  <!-- qna selectOne -->
 	<select id="selectOne_qna" parameterType="int" resultType="qna_viewDTO">
 	select * from qna_view where qna_viewnum=#{qna_viewnum}
 	
 	</select>
 	
 <!-- 리뷰 전체보기 --> 
  <select id="review_list" parameterType="com.theater.util.RowNum" resultMap="reviewDTO">
  		select * from
  		(select rownum r, N.* from
  		(select * from review order by review_date desc) N)
  		where r between #{startRow} and #{lastRow}  
  </select>

<!-- 리뷰 selectOne -->
<select id="review_selectOne" parameterType="int" resultType="reviewDTO">
	select * from review where review_num=#{review_num}
</select>


<!--  qna write -->
	<insert id="qna_insert" parameterType="qna_viewDTO">
	<selectKey keyProperty="qna_viewnum"  resultType="int" order="BEFORE">
	select qna_viewnum.nextval from dual
	</selectKey>
	insert into qna_view values(#{qna_viewnum}, #{id}, #{drama_num} , #{contents} , sysdate , #{qna_viewnum},0,0)
	</insert>

<!-- 리뷰 delete -->
<delete id="review_delete" parameterType="int">
	delete review where review_num=#{review_num}
</delete>

<!-- qnalist 삭제(자신이 올린 문의글 삭제) -->
	<delete id="delete_qnaview" parameterType="int">
	delete qna_view where qna_viewnum=#{qna_viewnum}
  </delete>
 
 <!-- qna reply -->
 <insert id="qna_reply" parameterType="qna_viewDTO">
 <selectKey keyProperty="qna_viewnum" resultType="int" order="BEFORE">
 		select qna_viewnum.nextval from dual
 </selectKey>
  insert into qna_view values(#{qna_viewnum},#{id},#{drama_num},#{contents} , sysdate , #{ref},#{step}+1,#{depth}+1)
 </insert>
 
<update id="stepUpdate" parameterType="qna_viewDTO">
  	 <![CDATA[
  	 update qna_view set step=step+1 where ref=#{ref} and step>#{step} and depth=#{depth}+1
  	 ]]>
  </update>
 <!-- qna 삭제시 redirect 로 받아올 넘버 출력 -->
  	<select id="delete_drama_num" parameterType="int" resultType="qna_viewDTO">
  	select *from qna_view where qna_viewnum=#{qna_viewnum} 
  	</select>
  	<!-- 공연리뷰 리스트 -->
  	<select id="dramaReviewList" parameterType="com.theater.util.RowNum" resultType="reviewDTO">
  		select * from
  		(select rownum r, N.* from
  		(select * from review
		<if test="kind == 'Title'">
			where title like '%'||#{search}||'%'
		</if>
		<if test="kind == 'id'">
			where writer like '%'||#{search}||'%'
		</if>
		<if test="kind == 'Contents'">
			where contents like '%'||#{search}||'%'
		</if>
		order by review_date desc) N)
  		where r between #{startRow} and #{lastRow}
  	</select>
  	<!-- 공연리뷰 write -->
  	<insert id="review_insert" parameterType="reviewDTO">
  	<selectKey keyProperty="review_num" resultType="int" order="BEFORE">
  	select review_num.nextval from dual
  	</selectKey>
  		insert into review values(#{review_num}, #{title} , #{contents}, #{id} , #{star}, #{file_num}, #{drama_num}, sysdate)
  	</insert>
  	<!--  공연리뷰 write 에서 drama 선택 -->
  	<select id="review_insert_select" parameterType="java.util.Map"  resultType="dramaDTO">
  		select title, drama_num from drama;
  	</select>
  	<!-- 공연리뷰 write 에서 파일 넘버 선택 -->
  	 <select id="review_file_num" resultType="int">
  		select file_num.nextval from dual	
  	</select>	
  		<!-- 공연리뷰 update -->
  		<update id="review_update" parameterType="reviewDTO">
  			update review set title=#{title} , contents=#{contents} , file_num=#{file_num} , star=#{star} , review_date =sysdate where review_num=#{review_num}
  		</update>

  	<select id="total_seat" parameterType="int" resultType="int">
  		select (row_num * col_num) from company_info where company_num=#{company_num}
  	</select>
  	<select id="search_dateNum" parameterType="java.util.HashMap" resultType="int">
  		select date_num from date_list where drama_num=#{drama_num} and drama_date=#{drama_date} and drama_time=#{drama_time}
  	</select>
  	<select id="selectSeat" parameterType="java.util.HashMap" resultMap="seatDTO">
  		select * from seat where drama_num=#{drama_num} and date_num=#{date_num}
  	</select>
  	<select id="searchCompanyNum" parameterType="com.theater.member.MemberDTO" resultType="int">
  		select company_num from company_info where id='${id}'
  	</select>
  	<!-- 좌석페이지 관련 mapper -->
  	<select id="buyNum" resultType="int">
  		select buy_num.nextval from dual
  	</select>
  	<insert id="insertSeat" parameterMap="seatDTO">
  		insert into seat values(#{buy_num}, #{drama_num}, #{date_num}, #{id}, #{select_seat}, #{ticket_numbers}, #{point_num}, sysdate)
  	</insert>
  	<!-- orderList 관련 -->
  	<select id="orderList" parameterType="String" resultType="com.theater.drama.OrderListDTO">
  		select * from seat where id=#{id}
  	</select>
  	<select id="orderListOne" parameterType="com.theater.drama.OrderListDTO" resultType="com.theater.drama.OrderListDTO">
  		select s.*, dr.contents, dr.price, dr.file_num, da.drama_date, da.drama_time, p.point, p.kind 
  		from drama dr, date_list da, point p, seat s 
  		where s.buy_num=${buy_num} and dr.drama_num=#{drama_num} and da.date_num=#{date_num} and p.point_num=#{point_num}
  	</select>
  	<select id="orderFileName" parameterType="int" resultType="String">
  		select file_name from file_table where file_num=#{file_num}
  	</select>
  		<!-- 예매순위 -->
	<select id="rankList" parameterType="com.theater.util.RowNum"
		resultMap="dramaDTO">
		select * from
		(select rownum r, N.* from
		(select * from drama order by buy_hit desc) N)
		where r between #{startRow} and #{lastRow}
	</select>
	<select id="review_totalcount" parameterType="int" resultType="java.lang.Integer">
	select nvl(count(review_num), 0) from review where drama_num=#{drama_num}
	
	</select>
	
	<!-- drama update 부분 -->
  	<update id="update" parameterType="com.theater.drama.DramaDTO">
  		update drama set title=#{title}, contents=#{contents}, place=#{place}, price=#{price}, simple=#{simple}, address=#{address} where drama_num=#{drama_num}
  	</update>
  	<select id="search_dateList" parameterType="int" resultType="com.theater.drama.DramaListDTO">
  		select * from date_list where drama_num=#{drama_num}
  	</select>
  	<update id="date_update" parameterType="java.util.HashMap">
  		update date_list set drama_date=#{drama_date}, drama_time=#{drama_time} where date_num=#{date_num} and drama_num=#{drama_num}
  	</update>
  	<delete id="delete_dateList" parameterType="int">
  		delete from date_list where date_num=#{date_num}
  	</delete>
  </mapper><!-- xml과 동일한 이름으로 한다. -->
  